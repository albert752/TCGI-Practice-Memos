# Practice 4 memo of TCGI
## Previous questions
* peter.example.com A record must be located on `nsce`.
* peter.left.example.com A record must be located on `nsne` whereas its right
	counterpart must be located on `nsner`
* The `SOA` for the right zone has to be located on `nsner`.
* All the `PTR` are located in the root server.
* MX records for roght and left are located in the same NS as left and right A
	records for peter.
* The `NS` record for right.example.net has to be located in `nsne` and in
	`nsner`.

## Exercice 1
The `DNS` information on Alice's machine is located on `/etc/resolv.conf`. The
contents are the following:
```
nameserver 10.0.0.21
search example.com
```

As it can be seen, the primary `DNS` server used by Alice is `nsce`, who turns
out to be the administrator of her zone. The secons entry refers to an
unqualified name. 

The name server of the zone `example.com` is `nsce`. By taking a look on the
`bind` configuration files of this machine located at `/etc/bind/named.conf`,
we can conclude that he is the master:

```
zone "example.com" {
    type master;
    file "/etc/bind/db.com.example";
};
```

And it also has a hint reference to the root server. Now we dig into the zone
configuration:

```
nsce:/etc/bind# cat db.com.example 
; /etc/bind/db.com.example
$ORIGIN example.com.
$TTL    60000
@       IN   SOA   nsce  admin-mail.nsce (
	2006031201 ; serial
	28 ; refresh
	14 ; retry
	3600000 ; expire
	20 ; 20 secs of negative cache ttl
)

@                    IN   NS     nsce       ; unqualified name
nsce                 IN   A      10.0.0.21
david                IN   CNAME  david.example.net.
@                    IN   MX   10 mailserver1 
@                    IN   MX   20 mailserver2.example.com. 
alice                IN   A      10.0.0.22
mailserver1          IN   A      10.0.0.25
mailserver2          IN   A      10.0.0.26
```
We can see that we have the `SOA` record for the administrator and also the `NS`
record for himself followed by the glue record. After that, we see the entries
for David and Alice. We can see that David's domain name is an alias that
redirects to his canonical domain. We finaly observe two email `MX` records
with their `A` records. Notice that mailserver1 is using an unqualified name
because the `$ORIGIN` variable has been setup.

By running the following command, we found that the process name runs on port
53 and its name is named:

```
nsce:/etc/bind# netstat -tnlp | grep named
tcp        0      0 127.0.0.1:53            0.0.0.0:*               LISTEN 	
1199/named
tcp        0      0 10.0.0.21:53            0.0.0.0:*               LISTEN
1199/named
tcp        0      0 127.0.0.1:953           0.0.0.0:*               LISTEN
1199/named
tcp6       0      0 ::1:953                 :::*                    LISTEN
1199/named
```

Now we want to query the name server from Alice using `dig`. Before doing it,
we reset `nsce`. We do so by running: `/etc/init.d/bind9 restart`. After
running the `dig` command, we capture the query and the response form the NS,
the following image contains the reponse (the response also contains the
query):

![Image1](./images/img1.png)

And this is the output of the command:

```
alice:~# dig alice.example.com

; <<>> DiG 9.6-ESV-R4 <<>> alice.example.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 38389
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1

;; QUESTION SECTION:
;alice.example.com.             IN      A

;; ANSWER SECTION:
alice.example.com.      60000   IN      A       10.0.0.22

;; AUTHORITY SECTION:
example.com.            60000   IN      NS      nsce.example.com.

;; ADDITIONAL SECTION:
nsce.example.com.       60000   IN      A       10.0.0.21

;; Query time: 2 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 17:42:07 2019
;; MSG SIZE  rcvd: 86
```

As it can be seen, the servers returns the `A` record for Alice and also his
own `NS` record followed by the glue record. We can also see that the generic
`TTL` is set to 60000.

Now we try to resolve `joker.example.com`. We get the following output:
```
alice:~# dig joker.example.com

; <<>> DiG 9.6-ESV-R4 <<>> joker.example.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 9733
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;joker.example.com.             IN      A

;; AUTHORITY SECTION:
example.com.            20      IN      SOA     nsce.example.com.
admin-mail.nsce.example.com. 2006031201 28 14 3600000 20

;; Query time: 9 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:02:28 2019
;; MSG SIZE  rcvd: 87
```

As we can see, we get the `SOA` of the `NS` that has the authority on the zone.
This means that the host we are trying to resolve does not exist inside this
zone.

To add Joker's machine, we edited `/etc/bind/db.example.com` and added the
following line: `joker   IN   A      10.0.0.201`. We used unqualifed names to
simplify. Now, after restarting bind, these are the results of `dig`:

```
alice:~# dig joker.example.com
; <<>> DiG 9.6-ESV-R4 <<>> joker.example.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 20131
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1

;; QUESTION SECTION:
;joker.example.com.             IN      A

;; ANSWER SECTION:
joker.example.com.      60000   IN      A       10.0.0.201

;; AUTHORITY SECTION:
example.com.            60000   IN      NS      nsce.example.com.

;; ADDITIONAL SECTION:
nsce.example.com.       60000   IN      A       10.0.0.21

;; Query time: 5 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:06:45 2019
;; MSG SIZE  rcvd: 86
```

We now get the a record thet we have just created and if we `ping` the host
from Alice we get a response from him.

If we send an email to `john@example.com` it will get forwarded to the
mailserver1 beacuse it has more priority. If we run now `dig -t MX example.com`
we get the following output:

```
alice:~# dig -t MX example.com 

; <<>> DiG 9.6-ESV-R4 <<>> -t MX example.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 8265
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 3

;; QUESTION SECTION:
;example.com.                   IN      MX

;; ANSWER SECTION:
example.com.            60000   IN      MX      10 mailserver1.example.com.
example.com.            60000   IN      MX      20 mailserver2.example.com.

;; AUTHORITY SECTION:
example.com.            60000   IN      NS      nsce.example.com.

;; ADDITIONAL SECTION:
mailserver1.example.com. 60000  IN      A       10.0.0.25
mailserver2.example.com. 60000  IN      A       10.0.0.26
nsce.example.com.       60000   IN      A       10.0.0.21

;; Query time: 6 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:13:30 2019
;; MSG SIZE  rcvd: 152
```

It retuns all teh `MX` RRs and also the `NS`. In the additional section we find
all the glue records.

## Exercice 2: Recursive queries and caching
By running the `dig` command to find Bob's @IP, we get the following output:

```
alice:~# dig bob.com

; <<>> DiG 9.6-ESV-R4 <<>> bob.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 19160
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;bob.com.                       IN      A

;; ANSWER SECTION:
bob.com.                30      IN      A       10.0.0.12

;; AUTHORITY SECTION:
com.                    60000   IN      NS      nsc.com.

;; Query time: 104 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:17:51 2019
;; MSG SIZE  rcvd: 59
```
We can see that now, the authority section has the information of `ncs` which
is the administrator of `.com.` zone. We do not get the additional section with
the glue record.

![Image2](./images/img2.png)

If we now take a look on the captured traffic, we can see that `nsce` queries
the root server for `bob.com` and gets the `NS` and glue record of `nsc`. The
the `ncs` queries `nsc` and finally delivers its response to Alice.

After restaring the name servers, we run `dig bob.com; sleep 5; dig bob.com`.
The output is the following:
```
; <<>> DiG 9.6-ESV-R4 <<>> bob.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 58449
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;bob.com.                       IN      A

;; ANSWER SECTION:
bob.com.                30      IN      A       10.0.0.12

;; AUTHORITY SECTION:
com.                    60000   IN      NS      nsc.com.

;; Query time: 96 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:28:19 2019
;; MSG SIZE  rcvd: 59


; <<>> DiG 9.6-ESV-R4 <<>> bob.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 41716
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;bob.com.                       IN      A

;; ANSWER SECTION:
bob.com.                24      IN      A       10.0.0.12

;; AUTHORITY SECTION:
com.                    59994   IN      NS      nsc.com.

;; Query time: 4 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:28:25 2019
;; MSG SIZE  rcvd: 59
```

As it can be seen, the second query gets the same `A` record but with a lower
TTL, this is an indicator that the RR has been cached. We can also observe this
fact on the `NS` RR. If we take a look on the captured traffic, we can see that
the secons response comes directly form `nsce`.

If we now do a third `dig` after 30 seconds, we will encounter that `nsce` does
not query the root serverdue to the fact that the TTL for the `NS` RR has not
expire yet, so it will use the cached one. But it will still query `nsc`
because the TTL for that `A` RR has expired.

Now we are going to try to `dig` on `alice.com`. After runnig the command `dig
alice.com; sleep 5; dig alice.com`, we get the following output:

```
; <<>> DiG 9.6-ESV-R4 <<>> alice.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 10340
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;alice.com.                     IN      A

;; AUTHORITY SECTION:
com.                    0       IN      SOA     nsc.com. admin-mail.nsc.com.
2006031201 28800 14400 3600000 0

;; Query time: 11 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:46:01 2019
;; MSG SIZE  rcvd: 78


; <<>> DiG 9.6-ESV-R4 <<>> alice.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 57345
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;alice.com.                     IN      A

;; AUTHORITY SECTION:
com.                    0       IN      SOA     nsc.com. admin-mail.nsc.com.
2006031201 28800 14400 3600000 0

;; Query time: 10 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:46:06 2019
;; MSG SIZE  rcvd: 78
```
We can see that on both cases we are getting the SOA from `nsc` due to the
fact that `alice.com` does not exist. The only difference between both queries
is that only the first one reaches the root server. We see this behaviour due
to a negative TTL has not been set.

Now, if we change the negative TTL on `nsc` to 10 seconds (on `nsc`, edit the
file `/etc/bind/db.com`, change the last `SOA` parameter to 10) and we run: `dig
alice.com; sleep 5; dig alice.com; sleep 10; dig alice.com` we get the
following output:

```
; <<>> DiG 9.6-ESV-R4 <<>> alice.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 26011
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;alice.com.                     IN      A

;; AUTHORITY SECTION:
com.                    10      IN      SOA     nsc.com. admin-mail.nsc.com.
2006031201 28800 14400 3600000 10

;; Query time: 24 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:57:48 2019
;; MSG SIZE  rcvd: 78


; <<>> DiG 9.6-ESV-R4 <<>> alice.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 64875
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;alice.com.                     IN      A

;; AUTHORITY SECTION:
com.                    5       IN      SOA     nsc.com. admin-mail.nsc.com.
2006031201 28800 14400 3600000 10

;; Query time: 4 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:57:53 2019
;; MSG SIZE  rcvd: 78


; <<>> DiG 9.6-ESV-R4 <<>> alice.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 26826
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

;; QUESTION SECTION:
;alice.com.                     IN      A

;; AUTHORITY SECTION:
com.                    10      IN      SOA     nsc.com. admin-mail.nsc.com.
2006031201 28800 14400 3600000 10

;; Query time: 4 msec
;; SERVER: 10.0.0.21#53(10.0.0.21)
;; WHEN: Sun Mar 31 18:58:03 2019
;; MSG SIZE  rcvd: 78
```

And this are the captured packets:

![Image4](./images/img4.png)

We can see that the first query is the same as before, it does all the steps.
The second one thow is executed before expiring any TTL so it gets a direct
response from `nsce`. The last one is identical to the second one from the
experiment done before, it only caches the root sever.

## Exercice 1.3
Now we are going to configure the `.net` zone. The error on `nsn` is that all
the records are missing the last `.`, hence they are interpreted as unqualified
names. This are the final configurations:

### /etc/bind/db.net
This are the final configurations:

```
nsn:~# cat /etc/bind/db.
db.0      db.127    db.255    db.empty  db.local  db.net    db.root
nsn:~# cat /etc/bind/db.net 
$TTL    60000
@               IN      SOA     nsn    admin-mail.nsn(
                        2006031201 ; serial
                        28800 ; refresh
                        14400 ; retry
                        3600000 ; expire
                        0 ; negative cache ttl
                        )
@               IN      NS      nsn
nsn             IN      A       10.0.0.111


example.net.       IN      NS      nsne.example
nsne.example.net.  IN      A       10.0.0.121
```

```
nsner:~# cat /etc/bind/db.net.example.right 
$TTL    60000
@               IN      SOA     nsner    admin-mail.nsner (
                        2006031201 ; serial
                        28 ; refresh
                        14 ; retry
                        3600000 ; expire
                        0 ; negative cache ttl
                        )

@  IN  NS  nsner
nsner  IN  A  10.0.0.131
carla  IN  A  10.0.0.132
```

```
nsne:~# cat /etc/bind/db.net.example
$TTL 60000
@               IN      SOA     nsne    admin-mail.nsne (
                        2006031201 ; serial
                        28 ; refresh
                        14400 ; retry
                        3600000 ; expire
                        15 ; negative cache ttl
                        )
@  IN  NS  nsne
nsne  IN  A  10.0.0.121
david IN  A  10.0.0.122
bob.left  30  IN  A  10.0.0.133

right  IN  NS  nsner
nsner  IN  A  10.0.0.131
```

## Issues
* **E1:** What is the entry on Alice: `search example.com`?
* **E1:** What would happen if I don't set up the `$ORIGIN` variable?
* **E1:** Is the mail server OK?
* **E2:** Why we do not get the additional section with the glue record on the
	first dig?
